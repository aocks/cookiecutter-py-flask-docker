
* Introduction

This project provides a [[https://github.com/cookiecutter/cookiecutter][cookiecutter]] template for a dockerized project
for a python flask web server managed using an nginx reverse proxy.

The basic idea is to give you a simple way to start a new python
project which contains a web app (for browsers, APIs, or whatever)
with a few simple commands.

Ideally you should just be able to issue a command like

- =cookiecutter gh:aocks/cookiecutter-py-flask-docker=

and answer a few questions to get the skeleton for a web application
including things like:

- linting, testing, type checking
- docker-compose to run nginx and your flask application
- deployment scripts
- command line utilities

* Quickstart

First make sure you have [[https://github.com/cookiecutter/cookiecutter][cookiecutter]] installed. If not, you can
install [[https://github.com/cookiecutter/cookiecutter][cookiecutter]] via something like the following:
#+NAME: cpfd-install-cookiecutter
#+BEGIN_SRC shell :session show-cpfd :exports code
cd /tmp                   # work in tmp dir to illustrate example
python3 -m venv venv      # create a virtualenv
. venv/bin/activate       # and activate it
pip install cookiecutter  # so you can install cookiecutter
#+END_SRC


Once you have [[https://github.com/cookiecutter/cookiecutter][cookiecutter]] installed, use it with this template via:
#+NAME: cpfd-run-cookiecutter
#+BEGIN_SRC shell :session show-cpfd :exports code
cookiecutter gh:aocks/cookiecutter-py-flask-docker  
#+END_SRC
and answer the questions. The following are some details about how the
fields requested and what they are used for:

- =github_username=:
  - This can be either your username or the name of your
    organization. 
- =project_slug=:
  - This will determine the name of your new project directory and is
    auto-generated from your project name to be allow lowercase with
    no space or hyphens.

Once you are done, [[https://github.com/cookiecutter/cookiecutter][cookiecutter]] will create a new directory for you
based on the =project_slug= value you specified. This directory has
everything you need for your python project. You can just do the
following to build and deploy docker containers to local ports (9080
for HTTP and 9443 for SSL by default) for testing:
#+NAME: cpfd-local-deploy
#+BEGIN_SRC shell :session show-cpfd
cd python_boilerplate  # or whateer your project slug was
make local_deploy
#+END_SRC

You can then verify that the flask server is up via
#+NAME: cpfd-flask-health-check
#+BEGIN_SRC shell :session show-cpfd
curl localhost:9080/flask-health-check
#+END_SRC
or point your browser to http://localhost:9080. You can bring down the
docker containers via
#+NAME: cpfd-down
#+BEGIN_SRC shell :session show-cpfd
make docker_down
#+END_SRC

If you want to deploy for production on the usual ports, you can do
#+NAME: cpfd-deploy
#+BEGIN_SRC shell :session show-cpfd
make deploy
#+END_SRC
and verify via
#+NAME: cpfd-flask-health-check-production
#+BEGIN_SRC shell :session show-cpfd
curl localhost:80/flask-health-check
#+END_SRC

Of course, this flask server does not do much so once you have your
cookiecutter template, you will probably want to look at the files in
=/apps/webui/= and modify them for your application.

* Usage and Features

This section describes usage and features of this cookiecutter
template.

** Virtual environment

You generally want to use a virtual environment (=venv=) so that you
install requirements into that instead of your base system. If you do
=make venv= at the top level, the Makefile will create a virtual
environment and populate it with your requirements.

You will need to do =source venv_PROJECT_NAME/bin/activate= to
activate it.

** Checking

Doing =make check= in the top-level project directory will run various
checks including linting to check code style, pytype to check type
usage, and finally regression tests.

You should do =make check= regularly and fix any errors in order to
maintain high quality code.

** Docker, certbot, etc.

One of the main motivations for using this template to setup docker,
nginx, and flask is so you can easily manage SSL certificates with
certbot. After you have brought up the docker containers with
something like =make deploy= or =make local_deploy= you can exec into
the nginx container and run certbot via something like:
#+BEGIN_SRC shell
make exec_nginx
certbot
#+END_SRC

The docker-compose file volume mounts your ningx and letsencrypt
directories in =/opt/docker/persist/PROJECT_NAME= so that your nginx
configuration and your letsencrypt certificates persist even when your
containers shut down.

* Implementation

This section describes the implementation details of how this
cookiecutter template works. It is mainly of interesting if you want
to extend the template. If you just want to use it, you can skip this
section.

If you want to do development work you will want to fork the main
GitHub repository for this since cookiecutter likes to pull the
template from a fully checked-in repo. You can also have a GitHub repo
locally (provided that it ends in =.git=) and use the =file:///= path
to point cookiecutter to your GitHub template.

In any case, once have your cookiecutter repo setup, you can do
something like the following to test if your template works:
#+BEGIN_SRC shell :session show-cpfd
echo First set the COOKIE_REPO variable to point to your template
COOKIE_REPO=git@github.com:aocks/cookiecutter-py-flask-docker
echo Then make sure you have cookiecutter installed
python3 -m venv /tmp/venv
source /tmp/venv/bin/activate
pip install cookiecutter
echo Cleanup previous version and create the template
\rm -rf /tmp/python_boilerplate
cd /tmp
cookiecutter ${COOKIE_REPO} --no-input
echo Now make sure the template passes tests
cd /tmp/python_boilerplate
deactivate
make venv
source venv_python_boilerplate/bin/activate
make reqs
make test
#+END_SRC

You can also do =make deploy_local= to make sure deployment works (and
then =make docker_down= to shut it down) if you like. If there are
problems, fix your template and then repeat the above steps.

